#include <stdio.h>
#include <stdbool.h>

#define N 4

bool melysegiKereses(int graf[N][N], int sor, bool latogatott[], int megfeleltetettR[]);

void megoldasKiirasa(int megfeleltetettR[]);

void magyarAlgoritmus(int graf[N][N]) {
    int megfeleltetettR[N];
    for (int i = 0; i < N; i++)
        megfeleltetettR[i] = -1;

    int eredmeny = 0;
    for (int sor = 0; sor < N; sor++) {
        bool latogatott[N];
        for (int i = 0; i < N; i++)
            latogatott[i] = false;

        if (melysegiKereses(graf, sor, latogatott, megfeleltetettR))
            eredmeny++;
    }

    printf("Maximalis parositasok szama: %d\n", eredmeny);
    printf("A parositasok:\n");
    megoldasKiirasa(megfeleltetettR);
}

bool melysegiKereses(int graf[N][N], int sor, bool latogatott[], int megfeleltetettR[]) {
    for (int oszlop = 0; oszlop < N; oszlop++) {
        if (graf[sor][oszlop] && !latogatott[oszlop]) {
            latogatott[oszlop] = true;

            if (megfeleltetettR[oszlop] < 0 || melysegiKereses(graf, megfeleltetettR[oszlop], latogatott, megfeleltetettR)) {
                megfeleltetettR[oszlop] = sor;
                return true;
            }
        }
    }
    return false;
}

void megoldasKiirasa(int megfeleltetettR[]) {
    for (int i = 0; i < N; i++) {
        if (megfeleltetettR[i] >= 0)
            printf("A(z) %d. munkas a(z) %d. feladatot kapja.\n", megfeleltetettR[i], i);
    }
}

int main() {
    int graf[N][N] = {
        {0, 1, 0, 1},
        {1, 0, 1, 0},
        {0, 1, 0, 1},
        {1, 0, 1, 0}
    };

    magyarAlgoritmus(graf);

    return 0;
}
